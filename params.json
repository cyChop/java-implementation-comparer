{"name":"Implementation comparer","tagline":"A utility to compare performances on several implementation of a Java method","body":"# History\r\n\r\nOnce you understand how the JVM works, you usually can tell which way of programming will be the most efficient. Sometimes, you just want to tinker, though, and find out by the experience.\r\n\r\nIn those cases, though not really hard, it is quite a pain to have to implement the comparison solution, especially when the method is tightly related to its object, so I wrote some code I could easily reuse to compare several implementations of a method.\r\n\r\nAnd now I am sharing it.\r\n\r\n# What you will get from it?\r\n\r\nWhen using the comparison algorithm and logger, you will obtain this kind of output:\r\n\r\n```\r\no.k.c.c.ImplComparer - Beginning performance comparison for method <hello>, (3 check(s), 10000 iteration(s) per check\r\no.k.c.c.ImplComparisonLogger - +--------+--------------------+--------+\r\no.k.c.c.ImplComparisonLogger - | Method | Avg time (ms)      | Result |\r\no.k.c.c.ImplComparisonLogger - +--------+--------------------+--------+\r\no.k.c.c.ImplComparisonLogger - | hello  | 3.6887             |    REF |\r\no.k.c.c.ImplComparisonLogger - | hello1 | 2.7880666666666665 | == REF |\r\no.k.c.c.ImplComparisonLogger - | hello2 | 1.9368             | == REF |\r\no.k.c.c.ImplComparisonLogger - +--------+--------------------+--------+\r\n```\r\n\r\nThe columns are the following:\r\n\r\n1. **Method**: the name of the method being evaluated;\r\n2. **Avg time (ms)**: the average execution time during the verification, in milliseconds;\r\n3. **Result**: a comparison of results:\r\n  * ``REF``: for the reference (first) result, either if results both point to the same sector or both are ``void`` or ``null``;\r\n  * ``== REF``: for a result equal to the reference result (using the ``.equals(Object)`` method);\r\n  * ``!= REF``: for a result not equal to the reference result (using the ``.equals(Object)`` method).\r\n  \r\n# How to use it?\r\n\r\n## Create a test project\r\n\r\nThis is a suggestion of course, but it seems ill-advised to add the comparer as a dependency to\r\nyour project: it is only a programming tool.\r\n\r\nYou should add the project containing the class you wish to test as a dependency to your project.\r\n\r\n## Adding the comparer to your dependencies\r\n\r\nThis project is _not_ available on any Maven repository. You must therefore:\r\n\r\n1. clone this project in your own workspace;\r\n2. install it to your local repository using the ``mvn install`` command;\r\n3. add it as a dependency to your project:\r\n\r\n  ```xml\r\n  <dependency>\r\n    <groupId>org.keyboardplaying</groupId>\r\n    <artifactId>java-implementation-comparer</artifactId>\r\n    <version>1.0.0</version>\r\n  </dependency>\r\n  ```\r\n\r\n## Comparing and logging\r\n\r\n### Preparing variants\r\n\r\nFor instance, if I want to compare several implementations of the method\r\n``public static String hello(String name)``, you will have to write methods with the\r\n_exact same_ signature (return type, parameters) but adding a number at the end of the name of the\r\nmethod, e.g. ``public static String hello1(String name)``.\r\n\r\nThe algorithm will search all methods with the same signature and increment the suffix until no more\r\nvariant is found.\r\n\r\n### Perform the comparison\r\n\r\nI personally tend to create a ``TestClass`` and make a ``main`` which execute the comparison.\r\nBelow is an example:\r\n\r\n```java\r\n    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException,\r\n            IllegalArgumentException {\r\n        /* Prepare the comparer */\r\n        ImplComparer cmp = new ImplComparer();\r\n        /* Uncomment to override default settings */\r\n        // cmp.setChecks(3);\r\n        // cmp.setIterations(10000);\r\n\r\n        List<ImplCheckResult> results = cmp.compareStatic(ToBeTested.class, \"hello\",\r\n                new Class<?>[] { String.class }, new Object[] { \"Chop\" });\r\n        /* Non-static method variant */\r\n        // List<ImplCheckResult> results = cmp.compare(new ToBeTested(), \"hello\",\r\n        // new Class<?>[] { String.class }, new Object[] { \"Chop\" });\r\n\r\n        /* Print the result */\r\n        ImplComparisonLogger logger = new ImplComparisonLogger();\r\n        logger.log(results);\r\n    }\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}